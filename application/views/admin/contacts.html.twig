{#
    Filename    : contacts.html.twig
    Location    : application/views/admin/contacts.html.twig
    Purpose     : contacts page, , Implemented GET, POST, and PUT methods
    Created     : 07/23/2019 11:49:05 by Scarlet Witch
    Updated     : 07/25/2019 13:28:49 by Scarlet Witch
    Changes     : Update the baseURL
#}

{% extends 'admin/base.html.twig' %}

{% block title %} {{ page_title }} | Mount Carmel {% endblock %}

{% block contents %}
    <div class="row">
        <div id="media" class="col-12 col-lg-12">
            <div class="card">
                <div class="card-header">
                    <div class="clearfix">
                        <form class="form-inline float-right mt-1 d-none d-md-flex">
                            <a class="btn btn-brown mr-2" data-toggle="modal" href="#create">
                                <i class="align-middle" data-feather="plus"></i> Add New
                            </a>
                            <a id="reload" class="btn btn-brown" href="javascript:void(0)">
                                <i class="align-middle" data-feather="rotate-ccw"></i> Reload
                            </a>
                        </form>
                        <h3 class="card-title mb-2">{{ page_title }}</h3>
                        <h4 class="card-subtitle">{{ page_subtitle }}</h4>
                    </div>
                </div>
                <div class="card-body">
                    <table id="datatables-basic" class="table table-striped" width="100%">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Name</th>
                                <th>Posted on</th>
                                <th>Updated on</th>                                                                                   
                                <th>Author</th>
                                <th></th>
                                <th></th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block createModalForm %}
    <form id="create-form">
        <div id="ajax-preloader"></div>
        <div class="modal-body px-5">
            <input type="hidden" name="id">
            <div class="form-group">
                <input type="text" class="form-control" id="name" name="name" value="{{ set_value('name') }}" placeholder="Name">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="description" name="description" value="{{ set_value('description') }}" placeholder="Description">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="address1" name="address1" value="{{ set_value('address1') }}" placeholder="Address 1">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="address2" name="address2" value="{{ set_value('address2') }}" placeholder="Address 2">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="city" name="city" value="{{ set_value('city') }}" placeholder="City">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="province" name="province" value="{{ set_value('province') }}" placeholder="Province">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="country" name="country" value="{{ set_value('country') }}" placeholder="Country">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="landline" name="landline" value="{{ set_value('landline') }}" placeholder="Landline">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="mobile" name="mobile" value="{{ set_value('mobile') }}" placeholder="Mobile">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="email" name="email" value="{{ set_value('email') }}" placeholder="Email">
            </div>
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-lg btn-brown rounded-pill px-5 btn-change-state">Publish</button>
        </div>
    </form>
{% endblock %}

{% block updateModalForm %}
    <form id="update-form">
        <div id="ajax-preloader"></div>
        <div class="modal-body px-5">
            <input type="hidden" name="id">
            <div class="form-group">
                <input type="text" class="form-control" id="name" name="name" value="{{ set_value('name') }}" placeholder="contact Name">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="description" name="description" value="{{ set_value('description') }}" placeholder="description">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="address1" name="address1" value="{{ set_value('address1') }}" placeholder="Address 1">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="address2" name="address2" value="{{ set_value('address2') }}" placeholder="Address 2">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="city" name="city" value="{{ set_value('city') }}" placeholder="City">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="province" name="province" value="{{ set_value('province') }}" placeholder="Province">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="country" name="country" value="{{ set_value('country') }}" placeholder="country">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="landline" name="landline" value="{{ set_value('landline') }}" placeholder="Landline">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="mobile" name="mobile" value="{{ set_value('mobile') }}" placeholder="Mobile">
            </div>
            <div class="form-group">
                <input type="text" class="form-control" id="email" name="email" value="{{ set_value('email') }}" placeholder="Email">
            </div>
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn btn-lg btn-brown rounded-pill px-5 btn-change-state">Update</button>
        </div>
    </form>
{% endblock %}

{% block custom_scripts %}
    <script>
        $(function () {

            //let baseURL = location.origin.toLowerCase() + '/mountcarmel.web';                    
            let baseURL = location.origin.toLowerCase();
            let isProcessing = false;

            // GET: Display all
            let getAll = {
                init: function() {
                    this.display();
                    this.reloadList();
                },
                display: function() {

                    let el = $('#datatables-basic');

                    el.DataTable({
                        "processing": true,
                        "serverSide": false,
                        "ajax": {
                            "url": baseURL + "/admin/contacts/contacts",
                            "type": "GET"
                        },
                        "columns": [
                            {
                                "searchable": false,
                                "data": null
                            },
                            {"data": "name"},
                            {
                                "data": "posted_on",
                                "mRender": function (data) {
                                    return data
                                }
                            },
                            {"data": "updated_on"},                       
                            {"data": "author"},
                            {
                                "searchable": false,
                                "data": "id",
                                "mRender": function (data) {
                                    return '<a data-toggle="modal" data-param="' + data + '" data-toggle="tooltip" data-placement="top" title="Update" href="#update"><i class="align-middle material-icons md-22">mode_edit</i></a>';
                                }
                            },
                            {
                                "searchable": false,
                                "data": "id",
                                "mRender": function (data) {
                                    return '<a data-toggle="modal" data-param="' + data + '" data-toggle="tooltip" data-placement="top" title="Delete" href="#delete"><i class="align-middle material-icons md-22">remove_circle_outline</i></a>';
                                }
                            }
                        ],
                        "lengthMenu": [[10, 25, 50, 75, 100], [10, 25, 50, 75, 100]],
                        "order": [[2, "desc"]],
                        "columnDefs": [
                            {"orderable": false, "targets": [0, 5, 6]}
                        ],
                        "fnCreatedRow": function (row, data, index) {
                            $('td', row).eq(0).html(index + 1);
                        },
                        "responsive": true,
                        "language": {
                            "decimal": "",
                            "emptyTable": "No data available in table",
                            "info": "Showing _START_ to _END_ of _TOTAL_ entries",
                            "infoEmpty": "Showing 0 to 0 of 0 entries",
                            "infoFiltered": "(filtered from _MAX_ total entries)",
                            "infoPostFix": "",
                            "thousands": ",",
                            "lengthMenu": "Show _MENU_ entries",
                            "loadingRecords": "Loading...",
                            "processing": "Processing...",
                            "search": "Search:",
                            "zeroRecords": "No matching records found",
                            "paginate": {
                                "first": "First",
                                "last": "Last",
                                "next": "Next",
                                "previous": "Previous"
                            },
                            "aria": {
                                "sortAscending": ": activate to sort column ascending",
                                "sortDescending": ": activate to sort column descending"
                            }
                        }
                    });
                },
                reloadList: function() {
                    $('#reload').on('click', function (e) {
                        $('#datatables-basic').DataTable().ajax.reload(null, true); // user paging will reset on reload				                                
                        e.preventDefault();
                    })
                }
            }

            // GET: Display by id
            let getById = {
                init: function() {
                    this.display();
                },
                display: function() {
                    $('#update').on('show.bs.modal', function (e) {
                        let el = $(this);

                        // Reset form
                        el.find('form').each(function() { this.reset() });
                        el.find('.form-control').removeClass('is-invalid');

                        let id = $(e.relatedTarget).data('param');
                        let data = el.serialize();

                        $.ajax({
                            url: baseURL + '/admin/contacts/contact/id/' + id,
                            type: 'GET',
                            dataType: 'json',
                            data: data,
                            cache: false,
                            processData: false,
                            beforeSend: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').show();
                            },
                            complete: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').hide('fast');
                            },
                            success: function (data) {
                                if (data) {
                                    // Populate form
                                    el.find('input:hidden[name="id"]').val(data.id);
                                    el.find('input[name="name"]').val(data.name);
                                    el.find('input[name="description"]').val(data.description);
                                    el.find('input[name="address1"]').val(data.address1);
                                    el.find('input[name="address2"]').val(data.address2);                                    
                                    el.find('input[name="city"]').val(data.city);
                                    el.find('input[name="province"]').val(data.province);
                                    el.find('input[name="country"]').val(data.country);
                                    el.find('input[name="landline"]').val(data.landline);
                                    el.find('input[name="mobile"]').val(data.mobile);
                                    el.find('input[name="email"]').val(data.email);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                console.log('The following error occurred: ' + textStatus, errorThrown);
                            }
                        });
                    });
                }
            }

            // POST: Add new contact
            let create = {
                init: function() {
                    this.bindForm();
                },
                bindForm: function () {
                    $('#create').on('shown.bs.modal', this.submitForm(), function(){
                        // Reset form
                        $(this).find('form').each(function() { this.reset() });
                        $(this).find('.form-control').removeClass('is-invalid');
                        // Auto focus
                        //$(this).find('input').trigger('focus');
                        // Disabled above code, to specify fields to focus
                        let el = $(this);
                        el.find('input[name="name"]').trigger('focus');
                    });
                },
                submitForm: function() {
                    // Prevent multiple ajax request
                    if (isProcessing) return;
                    isProcessing = true;

                    $('#create-form').on('submit', function(e){

                        let el = $(this);
                        let btn = el.find('.btn-change-state');
                        let data = el.serialize();
                        
                        $.ajax({
                            url: baseURL + '/admin/contacts/create',
                            type: 'POST',
                            dataType: 'json',
                            data: data,
                            cache: false,
                            processData: false,
                            beforeSend: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').show();
                                btn.attr('disabled', 'disabled');
                            },
                            complete: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').hide('fast');
                                btn.removeAttr('disabled');
                            },
                            success: function (data) {
                                if (data.status === true) {
                                    // Reload datatables
                                    $('#datatables-basic').DataTable().ajax.reload(null, false); // user paging is not reset on reload

                                    // Hide this modal
                                    $('#create').modal('hide');

                                    // Show and append notif msg  
                                    $('#notif').modal('show').find('.modal-body p').text('A new contacts has been published');
                                    
                                    // Hide notif after (x) number of seconds 
                                    setTimeout(function(){ 
                                        $('#notif').modal('hide');
                                    }, 3000);
                                } else {
                                    // Form error
                                    (Boolean(data.name)) ? el.find('#name').addClass('is-invalid') : el.find('#name').removeClass('is-invalid');  
                                    (Boolean(data.description)) ? el.find('#description').addClass('is-invalid') : el.find('#description').removeClass('is-invalid');  
                                    (Boolean(data.address1)) ? el.find('#address1').addClass('is-invalid') : el.find('#address1').removeClass('is-invalid');                                        
                                    (Boolean(data.address2)) ? el.find('#address2').addClass('is-invalid') : el.find('#address2').removeClass('is-invalid');  
                                    (Boolean(data.city)) ? el.find('#city').addClass('is-invalid') : el.find('#city').removeClass('is-invalid');   
                                    (Boolean(data.province)) ? el.find('#province').addClass('is-invalid') : el.find('#province').removeClass('is-invalid');   
                                    (Boolean(data.country)) ? el.find('#country').addClass('is-invalid') : el.find('#country').removeClass('is-invalid');   
                                    (Boolean(data.landline)) ? el.find('#landline').addClass('is-invalid') : el.find('#landline').removeClass('is-invalid');   
                                    (Boolean(data.mobile)) ? el.find('#mobile').addClass('is-invalid') : el.find('#mobile').removeClass('is-invalid');   
                                    (Boolean(data.email)) ? el.find('#email').addClass('is-invalid') : el.find('#email').removeClass('is-invalid');  
                                                                        
                                    // For debugging
                                    console.log(data.status);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                // For debugging
                                console.log('The following error occurred: ' + textStatus, errorThrown);
                            }
                        });
                        e.preventDefault();
                    });
                }
            }

            // PUT: Update contact
            let update = {
                init: function() {
                    this.bindForm();
                },
                bindForm: function () {
                    $('#update').on('show.bs.modal', this.submitForm(), function(){
                        // Reset form
                        $(this).find('form').each(function() { this.reset() });
                        $(this).find('.form-control').removeClass('is-invalid');
                    });
                },
                submitForm: function() {
                    $('#update-form').on('submit', function(e){
                        let el = $(this);
                        let btn = el.find('.btn-change-state');
                        let id = el.find('input:hidden[name="id"]').val();
                        let data = el.serialize();
                    
                        $.ajax({
                            url: baseURL + '/admin/contacts/update/id/' + id,
                            type: 'PUT',
                            dataType: 'json',
                            data: data,
                            cache: false,
                            processData: false,
                            beforeSend: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').show();
                                btn.attr('disabled', 'disabled');
                            },
                            complete: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').hide('fast');
                                btn.removeAttr('disabled');
                            },
                            success: function (data) {
                                if (data.status === true) {
                                    // Reload datatables
                                    $('#datatables-basic').DataTable().ajax.reload(null, false); // user paging is not reset on reload

                                    // Hide this modal
                                    $('#update').modal('hide');

                                    // Show and append notif msg  
                                    $('#notif').modal('show').find('.modal-body p').text('contacts #' + id + ' has been updated');
                                    
                                    // Hide notif after (x) number of seconds 
                                    setTimeout(function(){ 
                                        $('#notif').modal('hide');
                                    }, 3000);
                                } else {
                                    // Form error
                                    (Boolean(data.name)) ? el.find('#name').addClass('is-invalid') : el.find('#name').removeClass('is-invalid');  
                                    (Boolean(data.description)) ? el.find('#description').addClass('is-invalid') : el.find('#description').removeClass('is-invalid');  
                                    (Boolean(data.address1)) ? el.find('#address1').addClass('is-invalid') : el.find('#address1').removeClass('is-invalid');  
                                    (Boolean(data.address2)) ? el.find('#address2').addClass('is-invalid') : el.find('#address2').removeClass('is-invalid');  
                                    (Boolean(data.city)) ? el.find('#city').addClass('is-invalid') : el.find('#city').removeClass('is-invalid');  
                                    (Boolean(data.province)) ? el.find('#province').addClass('is-invalid') : el.find('#province').removeClass('is-invalid');  
                                    (Boolean(data.country)) ? el.find('#country').addClass('is-invalid') : el.find('#country').removeClass('is-invalid');  
                                    (Boolean(data.landline)) ? el.find('#landline').addClass('is-invalid') : el.find('#landline').removeClass('is-invalid');  
                                    (Boolean(data.mobile)) ? el.find('#mobile').addClass('is-invalid') : el.find('#mobile').removeClass('is-invalid');    
                                    (Boolean(data.email)) ? el.find('#email').addClass('is-invalid') : el.find('#email').removeClass('is-invalid');  
                                    
                                    // For debugging
                                    console.log(data.status);
                               }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                // For debugging
                                console.log('The following error occurred: ' + textStatus, errorThrown);
                            }
                        });
                        e.preventDefault();
                    });
                }
            }

            // PUT: Delete contact
            let softDelete = {
                init: function() {
                    this.bindForm();
                },
                bindForm: function () {
                    $('#delete').on('show.bs.modal', this.submitForm(), function(e){
                        $(this).find('#ajax-response').empty();
                        $(this).find('input:hidden[name="id"]').val($(e.relatedTarget).data('param'));
                        $(this).find('.modal-body p').text('Are you sure you want to delete contacts #' + $(e.relatedTarget).data('param') + '?');
                    });
                },
                submitForm: function() {
                    $('#delete-form').on('submit', function(e){
                        let el = $(this);
                        let btn = el.find('.btn-change-state');
                        let id = el.find('input:hidden[name="id"]').val();
                        let data = el.serialize();
                    
                        $.ajax({
                            url: baseURL + '/admin/contacts/delete/id/' + id,
                            type: 'PUT',
                            dataType: 'json',
                            data: data,
                            cache: false,
                            processData: false,
                            beforeSend: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').show();
                                btn.attr('disabled', 'disabled');
                            },
                            complete: function () {
                                el.find('#ajax-preloader').html(
                                    '<div class="loader">' +
                                    '  <svg class="circular" viewBox="25 25 50 50">' +
                                    '    <circle class="path" cx="50" cy="50" r="20" fill="none" stroke-width="2" stroke-miterlimit="10"/>' +
                                    '  </svg>' +
                                    '</div>').hide('fast');
                                btn.removeAttr('disabled');
                            },
                            success: function (data) {
                                if (data.status === true) {
                                    // Reload datatables
                                    $('#datatables-basic').DataTable().ajax.reload(null, false); // user paging is not reset on reload

                                    // Hide this modal
                                    $('#delete').modal('hide');

                                    // Show and append notif msg  
                                    $('#notif').modal('show').find('.modal-body p').text('contacts #' + id + ' has been moved to trash');
                                    
                                    // Hide notif after (x) number of seconds 
                                    setTimeout(function(){ 
                                        $('#notif').modal('hide');
                                    }, 3000);
                                    
                                } else {
                                    // For debugging
                                    console.log(data.status);
                                }
                            },
                            error: function (jqXHR, textStatus, errorThrown) {
                                // For debugging
                                console.log('The following error occurred: ' + textStatus, errorThrown);
                            }
                        });
                        e.preventDefault();
                    });
                }
            }

            getAll.init();
            getById.init();
            create.init();
            update.init();
            softDelete.init();
        })
    </script>
{% endblock %}